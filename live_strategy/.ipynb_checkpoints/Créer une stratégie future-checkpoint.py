{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7172e8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append('cBot-Project/utilities')\n",
    "from cBot_perp_ftx import cBot_perp_ftx\n",
    "import ta\n",
    "import pandas as pd\n",
    "\n",
    "ftx = cBot_perp_ftx(\n",
    "        apiKey='',\n",
    "        secret='',\n",
    "        subAccountName=''\n",
    "    )\n",
    "\n",
    "# -- Strategy variable --\n",
    "perpSymbol = 'ETH-PERP'\n",
    "leverage = 2\n",
    "\n",
    "# -- Price Data --\n",
    "df = ftx.get_last_historical(perpSymbol, '1h', 250)\n",
    "\n",
    "# -- indicators --\n",
    "df['EMA1']=ta.trend.ema_indicator(close=df['close'], window=7)\n",
    "df['EMA2']=ta.trend.ema_indicator(close=df['close'], window=30)\n",
    "df['EMA3']=ta.trend.ema_indicator(close=df['close'], window=50)\n",
    "df['EMA4']=ta.trend.ema_indicator(close=df['close'], window=100)\n",
    "df['EMA5']=ta.trend.ema_indicator(close=df['close'], window=121)\n",
    "df['EMA6']=ta.trend.ema_indicator(close=df['close'], window=200)\n",
    "df['STOCH_RSI'] = ta.momentum.stochrsi(close=df['close'], window=14, smooth1=3, smooth2=3)\n",
    "\n",
    "# -- Condition to open Market LONG --\n",
    "def openLongCondition(row):\n",
    "    if (row['EMA1'] > row['EMA2'] \n",
    "    and row['EMA2'] > row['EMA3'] \n",
    "    and row['EMA3'] > row['EMA4'] \n",
    "    and row['EMA4'] > row['EMA5'] \n",
    "    and row['EMA5'] > row['EMA6'] \n",
    "    and row['STOCH_RSI'] < 0.82):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# -- Condition to close Market LONG --\n",
    "def closeLongCondition(row):\n",
    "    if row['EMA6'] > row['EMA1']:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# -- Condition to open Market SHORT --\n",
    "def openShortCondition(row):\n",
    "    if ( row['EMA6'] > row['EMA5'] \n",
    "    and row['EMA5'] > row['EMA4'] \n",
    "    and row['EMA4'] > row['EMA3'] \n",
    "    and row['EMA3'] > row['EMA2'] \n",
    "    and row['EMA2'] > row['EMA1'] \n",
    "    and row['STOCH_RSI'] > 0.2 ):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# -- Condition to close Market SHORT --\n",
    "def closeShortCondition(row):\n",
    "    if row['EMA1'] > row['EMA6']:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# -- Get USD amount on Sub Account --\n",
    "usdAmount = ftx.get_balance_of_one_coin('USD')\n",
    "\n",
    "# -- Get actual price --\n",
    "actualPrice = df.iloc[-1]['close']\n",
    "\n",
    "# -- Check if you have no position running --\n",
    "if len(ftx.get_open_position(perpSymbol)) == 0:\n",
    "    # -- Check if you have to open a LONG --\n",
    "    if openLongCondition(df.iloc[-2]):\n",
    "        # -- Cancel all order (stop loss) --\n",
    "        ftx.cancel_all_open_order(perpSymbol)\n",
    "        # -- Define the quantity max of token from your usd balance --\n",
    "        quantityMax = float(usdAmount)/actualPrice\n",
    "        # -- Create a market order Long --\n",
    "        longOrder = ftx.place_market_order(\n",
    "            perpSymbol, \n",
    "            'buy', \n",
    "            quantityMax, \n",
    "            leverage\n",
    "        )\n",
    "        print(\"Open a market LONG at\", actualPrice)\n",
    "        # -- Create a market stop loss -3% --\n",
    "        stopLoss = ftx.place_market_stop_loss(\n",
    "            perpSymbol, \n",
    "            'sell', \n",
    "            quantityMax, \n",
    "            actualPrice - 0.03 * actualPrice,\n",
    "            leverage\n",
    "        )\n",
    "        print(\"Place a Stop Loss at \", actualPrice - 0.03 * actualPrice)\n",
    "\n",
    "    elif openShortCondition(df.iloc[-2]):\n",
    "        # -- Cancel all order (stop loss) --\n",
    "        ftx.cancel_all_open_order(perpSymbol)\n",
    "        # -- Define the quantity max of token from your usd balance --\n",
    "        quantityMax = float(usdAmount)/actualPrice\n",
    "        # -- Create a market order Long --\n",
    "        shortOrder = ftx.place_market_order(\n",
    "            perpSymbol, \n",
    "            'sell', \n",
    "            quantityMax, \n",
    "            leverage\n",
    "        )\n",
    "        print(\"Open a market SHORT at\", actualPrice)\n",
    "        # -- Create a market stop loss -3% --\n",
    "        stopLoss = ftx.place_market_stop_loss(\n",
    "            perpSymbol, \n",
    "            'buy', \n",
    "            quantityMax, \n",
    "            actualPrice + 0.03 * actualPrice,\n",
    "            leverage\n",
    "        )\n",
    "        print(\"Place a Stop Loss at\", actualPrice + 0.03 * actualPrice)\n",
    "\n",
    "    else:\n",
    "        print(\"No opportunity to take\")\n",
    "\n",
    "else:\n",
    "    # -- Check if you have a LONG open --\n",
    "    if ftx.get_open_position(perpSymbol)[0]['side'] == 'long':\n",
    "        # -- Check if you have to close your LONG --\n",
    "        if closeLongCondition(df.iloc[-2]):\n",
    "            ftx.close_all_open_position(perpSymbol)\n",
    "            ftx.cancel_all_open_order(perpSymbol)\n",
    "            print('Close my LONG position')\n",
    "        else:\n",
    "            print(\"A LONG is running and I don't want to stop it\")\n",
    "    # -- Check if you have a SHORT open --\n",
    "    elif ftx.get_open_position(perpSymbol)[0]['side'] == 'short':\n",
    "        if closeShortCondition(df.iloc[-2]):\n",
    "            ftx.close_all_open_position(perpSymbol)\n",
    "            ftx.cancel_all_open_order(perpSymbol)\n",
    "            print('Close my SHORT position')\n",
    "        else:\n",
    "            print(\"A SHORT is running and I don't want to stop it\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
